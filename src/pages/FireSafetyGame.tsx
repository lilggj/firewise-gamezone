
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Flame, Award, AlertTriangle, Home } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/components/ui/use-toast';
import GameRegistration from '@/components/GameRegistration';
import GameQuestion from '@/components/GameQuestion';
import GameComplete from '@/components/GameComplete';

type GameState = 'registration' | 'playing' | 'completed';

const FireSafetyGame: React.FC = () => {
  const [gameState, setGameState] = useState<GameState>('registration');
  const [playerName, setPlayerName] = useState<string>('');
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [diamonds, setDiamonds] = useState(0);
  const [answers, setAnswers] = useState<string[]>([]);
  const { toast } = useToast();
  const navigate = useNavigate();

  const questions = [
    {
      id: 1,
      question: "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ç—ã —É–≤–∏–¥–µ–ª –¥—ã–º –∏–ª–∏ –æ–≥–æ–Ω—å?",
      options: [
        { id: "a", text: "–°–ø—Ä—è—Ç–∞—Ç—å—Å—è –ø–æ–¥ –∫—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤ —à–∫–∞—Ñ", isCorrect: false },
        { id: "b", text: "–ë—ã—Å—Ç—Ä–æ –ø–æ–∫–∏–Ω—É—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ", isCorrect: true },
        { id: "c", text: "–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É", isCorrect: false }
      ],
      explanation: "–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å –¥—ã–º –∏–ª–∏ –æ–≥–æ–Ω—å, –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–º–µ—â–µ–Ω–∏—è. –ù–µ –ø—Ä—è—á—å—Å—è –∏ –Ω–µ –ø—ã—Ç–∞–π—Å—è –ø—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å - —ç—Ç–æ –æ–ø–∞—Å–Ω–æ!"
    },
    {
      id: 2,
      question: "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤ —à–∫–æ–ª–µ –æ–±—ä—è–≤–∏–ª–∏ –ø–æ–∂–∞—Ä–Ω—É—é —Ç—Ä–µ–≤–æ–≥—É?",
      options: [
        { id: "a", text: "–°–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ –≤–µ—â–∏ –∏ –ø–æ—Ç–æ–º –≤—ã–π—Ç–∏", isCorrect: false },
        { id: "b", text: "–í—ã–π—Ç–∏ –∏–∑ –∑–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å —É—á–∏—Ç–µ–ª–µ–º –∏ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏", isCorrect: true },
        { id: "c", text: "–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –∏ –∂–¥–∞—Ç—å –∏—Ö", isCorrect: false }
      ],
      explanation: "–ü—Ä–∏ –ø–æ–∂–∞—Ä–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–µ –≤ —à–∫–æ–ª–µ –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–π—Ç–∏ —Å —É—á–∏—Ç–µ–ª–µ–º –∏ –∫–ª–∞—Å—Å–æ–º. –ù–µ —Ç–µ—Ä—è–π –≤—Ä–µ–º—è –Ω–∞ —Å–±–æ—Ä –≤–µ—â–µ–π!"
    },
    {
      id: 3,
      question: "–ï—Å–ª–∏ —Ç–≤–æ—è –æ–¥–µ–∂–¥–∞ –∑–∞–≥–æ—Ä–µ–ª–∞—Å—å, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å?",
      options: [
        { id: "a", text: "–ë–µ–∂–∞—Ç—å –∑–∞ –ø–æ–º–æ—â—å—é", isCorrect: false },
        { id: "b", text: "–°–Ω—è—Ç—å –≥–æ—Ä—è—â—É—é –æ–¥–µ–∂–¥—É", isCorrect: false },
        { id: "c", text: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, —É–ø–∞—Å—Ç—å –Ω–∞ –ø–æ–ª –∏ –∫–∞—Ç–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ—Ç—É—à–∏—Ç—å –æ–≥–æ–Ω—å", isCorrect: true }
      ],
      explanation: "–ï—Å–ª–∏ –∑–∞–≥–æ—Ä–µ–ª–∞—Å—å –æ–¥–µ–∂–¥–∞ - –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å, —É–ø–∞–¥–∏ –∏ –∫–∞—Ç–∞–π—Å—è –ø–æ –ø–æ–ª—É. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ—Ç—É—à–∏—Ç—å –æ–≥–æ–Ω—å!"
    },
    {
      id: 4,
      question: "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ç—ã –æ–¥–∏–Ω –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ –∏ –Ω–∞—á–∞–ª—Å—è –ø–æ–∂–∞—Ä?",
      options: [
        { id: "a", text: "–ù–∞–π—Ç–∏ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ —Å–∫–∞–∑–∞—Ç—å –æ –ø–æ–∂–∞—Ä–µ", isCorrect: true },
        { id: "b", text: "–°–ø—Ä—è—Ç–∞—Ç—å—Å—è –≤ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π", isCorrect: false },
        { id: "c", text: "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ö–æ–¥–∏—Ç—å –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º", isCorrect: false }
      ],
      explanation: "–í —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–∑—Ä–æ—Å–ª–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ (–æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞) –∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø–æ–∂–∞—Ä–µ."
    },
    {
      id: 5,
      question: "–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –ø–æ–∂–∞—Ä–Ω—ã—Ö?",
      options: [
        { id: "a", text: "112 –∏–ª–∏ 01", isCorrect: true },
        { id: "b", text: "911", isCorrect: false },
        { id: "c", text: "102", isCorrect: false }
      ],
      explanation: "–í –†–æ—Å—Å–∏–∏ –Ω–æ–º–µ—Ä –ø–æ–∂–∞—Ä–Ω–æ–π —Å–ª—É–∂–±—ã - 01, –∞ –µ–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–± - 112."
    }
  ];

  const handleStartGame = (name: string) => {
    if (!name.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è",
        variant: "destructive"
      });
      return;
    }
    
    setPlayerName(name);
    setGameState('playing');
    setCurrentQuestionIndex(0);
    setDiamonds(0);
    setAnswers([]);
    
    toast({
      title: "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!",
      description: `–£–¥–∞—á–∏, ${name}! –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞–π –∞–ª–º–∞–∑—ã!`
    });
  };

  const handleAnswer = (questionId: number, answerId: string, isCorrect: boolean) => {
    // Record the answer
    setAnswers(prev => [...prev, answerId]);
    
    // Award diamonds for correct answers
    if (isCorrect) {
      const newDiamonds = diamonds + 1;
      setDiamonds(newDiamonds);
      
      toast({
        title: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –∞–ª–º–∞–∑",
        description: `–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${newDiamonds} –∞–ª–º–∞–∑–æ–≤!`,
        variant: "default"
      });
    } else {
      toast({
        title: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
        description: "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!",
        variant: "destructive"
      });
    }
    
    // Move to next question or complete game
    setTimeout(() => {
      if (currentQuestionIndex < questions.length - 1) {
        setCurrentQuestionIndex(prev => prev + 1);
      } else {
        setGameState('completed');
      }
    }, 1500);
  };

  const handlePlayAgain = () => {
    setGameState('registration');
    setPlayerName('');
    setCurrentQuestionIndex(0);
    setDiamonds(0);
    setAnswers([]);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-blue-100 py-8 px-4">
      <div className="max-w-3xl mx-auto">
        <header className="mb-8 text-center">
          <div className="flex justify-center mb-4">
            <motion.div
              animate={{ rotate: [0, 10, -10, 10, 0] }}
              transition={{ duration: 1, repeat: Infinity, repeatDelay: 5 }}
            >
              <Flame size={48} className="text-orange-500" />
            </motion.div>
          </div>
          <h1 className="text-3xl font-bold text-blue-900 mb-2">–ü–æ–∂–∞—Ä–Ω–∞—è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –î–µ—Ç–µ–π</h1>
          <p className="text-blue-700">–ò–∑—É—á–∞–π –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–±–∏—Ä–∞–π –∞–ª–º–∞–∑—ã!</p>
          
          {gameState !== 'registration' && (
            <div className="mt-4 flex justify-center items-center gap-2">
              <Award className="text-yellow-500" size={20} />
              <span className="font-bold text-blue-800">{playerName}</span>
              <span className="mx-2">‚Ä¢</span>
              <div className="flex items-center bg-blue-100 px-3 py-1 rounded-full">
                <span className="text-blue-800 font-semibold">{diamonds}</span>
                <span className="ml-1 text-blue-500">üíé</span>
              </div>
            </div>
          )}
        </header>

        <main>
          {gameState === 'registration' && (
            <GameRegistration onStartGame={handleStartGame} />
          )}

          {gameState === 'playing' && currentQuestionIndex < questions.length && (
            <GameQuestion 
              question={questions[currentQuestionIndex]} 
              onAnswer={handleAnswer}
              questionNumber={currentQuestionIndex + 1}
              totalQuestions={questions.length}
            />
          )}

          {gameState === 'completed' && (
            <GameComplete 
              playerName={playerName}
              diamonds={diamonds}
              totalQuestions={questions.length}
              onPlayAgain={handlePlayAgain}
            />
          )}
        </main>

        <footer className="mt-12 text-center text-sm text-gray-500">
          <Button variant="ghost" size="sm" onClick={() => navigate('/')}>
            <Home size={16} className="mr-1" /> –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Button>
          <p className="mt-2">–°–æ–∑–¥–∞–Ω–Ω–æ –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞</p>
        </footer>
      </div>
    </div>
  );
};

export default FireSafetyGame;
